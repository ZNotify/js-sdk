/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Provide UI */
    get: operations["webIndex"];
  };
  "/alive": {
    /** If the server is alive */
    get: operations["alive"];
  };
  "/check": {
    get: operations["checkUserSecret"];
  };
  "/docs": {
    get: operations["docRedirect"];
  };
  "/login": {
    get: operations["userLogin"];
  };
  "/login/github": {
    get: operations["githubOAuthCallback"];
  };
  "/{user_secret}": {
    /** Send notification to user_id */
    post: operations["sendMessageLite"];
  };
  "/{user_secret}/device/{device_id}": {
    /** Create or update device information */
    put: operations["createDevice"];
    /** Delete device with device_id */
    delete: operations["deleteDevice"];
  };
  "/{user_secret}/devices": {
    /** Delete device with device_id */
    get: operations["getDevicesByUserSecret"];
  };
  "/{user_secret}/message/{id}": {
    /** Get message record detail of a message */
    get: operations["getMessageById"];
    /** Delete message record with id */
    delete: operations["deleteMessageById"];
  };
  "/{user_secret}/messages": {
    /** Get messages of user with pagination */
    get: operations["getMessagesByUserSecret"];
  };
  "/{user_secret}/send": {
    /** Send notification to user_id */
    post: operations["sendMessage"];
  };
}

export interface definitions {
  "entity.Device": {
    channel?: definitions["enum.Sender"];
    deviceMeta?: string;
    deviceName?: string;
    identifier?: string;
  };
  "entity.Message": {
    content?: string;
    created_at?: string;
    id?: string;
    long?: string;
    priority?: definitions["enum.Priority"];
    title?: string;
  };
  /** @enum {string} */
  "enum.Priority": "low" | "normal" | "high";
  /** @enum {string} */
  "enum.Sender": "FCM" | "WebPush" | "WNS" | "Telegram" | "WebSocket";
  "types.BadRequestResponse": {
    body?: string;
    /** @default 400 */
    code?: number;
  };
  "types.NotFoundResponse": {
    body?: string;
    /** @default 404 */
    code?: number;
  };
  "types.Response-array_entity_Device": {
    body?: definitions["entity.Device"][];
    /** @default 200 */
    code?: number;
  };
  "types.Response-array_entity_Message": {
    body?: definitions["entity.Message"][];
    /** @default 200 */
    code?: number;
  };
  "types.Response-bool": {
    body?: boolean;
    /** @default 200 */
    code?: number;
  };
  "types.Response-entity_Message": {
    body?: definitions["entity.Message"];
    /** @default 200 */
    code?: number;
  };
  "types.UnauthorizedResponse": {
    body?: string;
    /** @default 401 */
    code?: number;
  };
}

export interface operations {
  /** Provide UI */
  webIndex: {
    responses: {
      /** html */
      200: {
        schema: string;
      };
    };
  };
  /** If the server is alive */
  alive: {
    responses: {
      /** No Content */
      204: {
        schema: string;
      };
    };
  };
  checkUserSecret: {
    parameters: {
      query: {
        /** Secret of user */
        user_secret: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-bool"];
      };
    };
  };
  docRedirect: {
    responses: {
      /** Moved Permanently */
      301: {
        schema: string;
      };
    };
  };
  userLogin: {
    responses: {
      /** Temporary Redirect */
      307: never;
    };
  };
  githubOAuthCallback: {
    parameters: {
      query: {
        /** should always be 'no_need_to_set_state' */
        state?: string;
        /** access code */
        code: string;
      };
    };
    responses: {
      /** Temporary Redirect */
      307: never;
      /** Bad Request */
      400: {
        schema: definitions["types.BadRequestResponse"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
  /** Send notification to user_id */
  sendMessageLite: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
      };
      body: {
        /** Message Content */
        string: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-entity_Message"];
      };
      /** Bad Request */
      400: {
        schema: definitions["types.BadRequestResponse"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
  /** Create or update device information */
  createDevice: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
        /** device_id should be a valid UUID */
        device_id: string;
      };
      formData: {
        /** channel can be used. */
        channel: "FCM" | "WebPush" | "WNS" | "Telegram" | "WebSocket";
        /** device name */
        device_name?: string;
        /** additional device meta */
        device_meta?: string;
        /** channel token */
        token?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-bool"];
      };
      /** Bad Request */
      400: {
        schema: definitions["types.BadRequestResponse"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
  /** Delete device with device_id */
  deleteDevice: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
        /** The identifier of device, should be a UUID */
        device_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-bool"];
      };
    };
  };
  /** Delete device with device_id */
  getDevicesByUserSecret: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-array_entity_Device"];
      };
    };
  };
  /** Get message record detail of a message */
  getMessageById: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
        /** ID of message */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-entity_Message"];
      };
      /** Bad Request */
      400: {
        schema: definitions["types.BadRequestResponse"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
      /** Not Found */
      404: {
        schema: definitions["types.NotFoundResponse"];
      };
    };
  };
  /** Delete message record with id */
  deleteMessageById: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
        /** ID of message */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-bool"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
  /** Get messages of user with pagination */
  getMessagesByUserSecret: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
      };
      query: {
        /** The number of records to skip */
        skip?: number;
        /** The number of records to return */
        limit?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-array_entity_Message"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
  /** Send notification to user_id */
  sendMessage: {
    parameters: {
      path: {
        /** Secret of user */
        user_secret: string;
      };
      formData: {
        /** Message Title */
        title?: string;
        /** Message Content */
        content: string;
        /** Long Message Content (optional) */
        long?: string;
        /** The priority of message */
        priority?: "low" | "normal" | "high";
      };
    };
    responses: {
      /** OK */
      200: {
        schema: definitions["types.Response-entity_Message"];
      };
      /** Bad Request */
      400: {
        schema: definitions["types.BadRequestResponse"];
      };
      /** Unauthorized */
      401: {
        schema: definitions["types.UnauthorizedResponse"];
      };
    };
  };
}

export interface external {}
